/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.96
 * Generated at: 2019-11-17 13:10:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import gis.model.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      gis.model.GISDAO dao = null;
      synchronized (session) {
        dao = (gis.model.GISDAO) _jspx_page_context.getAttribute("dao", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (dao == null){
          dao = new gis.model.GISDAO();
          _jspx_page_context.setAttribute("dao", dao, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');

// 검색 파라미터값 얻기
String searchText = request.getParameter("searchText");
if (searchText == null) searchText = "";

// 1. 총 게시물 수
int totalCount = dao.getTotalCount();
// 검색된 총 게시물 수
if (searchText != null) {
	totalCount = dao.getTotalCount_search(searchText);
}

// 2,3. 보여줄 리스트 수, 페이지 블록 크기 (임의지정가능)
int listSize = 3;
int pageBlockSize = 3;

// 4. 사용자의 현재 위치 (선택한 페이지)
String cPage_s = request.getParameter("cPage");
if (cPage_s == null || cPage_s.equals("")) {
	cPage_s = "1";
}
int cPage = Integer.parseInt(cPage_s);

// 총 페이지 수
int totalPage = (totalCount / listSize) + 1;
if (totalCount % listSize == 0) {
	totalPage --;
}

// 4-1. 그룹화
int userGroup = cPage / pageBlockSize;
if (cPage % pageBlockSize == 0) {
	userGroup--;
}

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>GIS TEST</title>\r\n");
      out.write("<script>\r\n");
      out.write("\t///// JSON 파일 읽기\r\n");
      out.write("\tvar xhr= new XMLHttpRequest();\r\n");
      out.write("\tvar target= \"temp.json\";\t// JSON 파일\r\n");
      out.write("\t\r\n");
      out.write("\txhr.open(\"GET\", target);\r\n");
      out.write("\txhr.send();\r\n");
      out.write("\t\r\n");
      out.write("\tvar data;\r\n");
      out.write("\txhr.onreadystatechange = function(){\r\n");
      out.write("\t\tif(xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("\t\t\tdata = xhr.responseText;\r\n");
      out.write("\t\t\t//data = eval('('+data+')');\t// text를 object로 변환 1\r\n");
      out.write("\t\t\tdata = JSON.parse(data);\t\t// text를 object로 변환 2 (JSON 전용)\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("<style>\r\n");
      out.write("img {\r\n");
      out.write("\twidth: 70px;\r\n");
      out.write("}\r\n");
      out.write("table {\r\n");
      out.write("\twidth: 100%\r\n");
      out.write("}\r\n");
      out.write("td {\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tborder: 1px solid gray;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<section>\r\n");
      out.write("<article>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<input type=\"checkbox\" id=\"red\" name=\"pin\" checked=\"checked\" onclick=\"marker_red();\"><img src=\"Image/pin_spot_red.png\">직장\r\n");
      out.write("\t\t<input type=\"checkbox\" id=\"yellow\" name=\"pin\" checked=\"checked\" onclick=\"marker_yellow();\"><img src=\"Image/pin_spot_yellow.png\">친구\r\n");
      out.write("\t\t<input type=\"checkbox\" id=\"blue\" name=\"pin\" checked=\"checked\" onclick=\"marker_blue();\"><img src=\"Image/pin_spot_blue.png\">가족\r\n");
      out.write("\t\t<input type=\"checkbox\" id=\"kakao\" name=\"pin\" checked=\"checked\" onclick=\"marker_kakao();\"><img src=\"Image/pin_spot_kakao.png\">기타\r\n");
      out.write("\t\t<input type=\"checkbox\" id=\"polygon\" name=\"pin\" checked=\"checked\" onclick=\"polygon_check();\"><img src=\"Image/polygon.png\">폴리곤\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<div id=\"map\" style=\"width: 100%; height: 500px;\"></div>\r\n");
      out.write("\t<script type=\"text/javascript\"\r\n");
      out.write("\t\tsrc=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=f496918795329413c6978c7f4225a5e4\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t/* 기본 지도 생성 */\r\n");
      out.write("\t\t// 지도를 담을 영역의 DOM 레퍼런스\r\n");
      out.write("\t\tvar container = document.getElementById('map');\r\n");
      out.write("\t\t// 지도를 생성할 때 필요한 기본 옵션\r\n");
      out.write("\t\tvar options = {\r\n");
      out.write("\t\t\tcenter: new kakao.maps.LatLng(37.565504, 126.999999),\r\n");
      out.write("\t\t\tlevel: 9\t// 지도의 레벨\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도 생성 및 객체 리턴\r\n");
      out.write("\t\tvar map = new kakao.maps.Map(container, options);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/////////////////////////////////////////////////////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 체크박스 체크여부 확인\r\n");
      out.write("\t\tvar pin_red = document.getElementById(\"red\").checked;\r\n");
      out.write("\t\tvar pin_yellow = document.getElementById(\"yellow\").checked;\r\n");
      out.write("\t\tvar pin_blue = document.getElementById(\"blue\").checked;\r\n");
      out.write("\t\tvar pin_kakao = document.getElementById(\"kakao\").checked;\r\n");
      out.write("\t\tvar polygon = document.getElementById(\"polygon\").checked;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar markers_red = [];\t\t// 마커 객체를 담을 배열\r\n");
      out.write("\t\tvar markers_yellow = [];\t// 마커 객체를 담을 배열\r\n");
      out.write("\t\tvar markers_blue = [];\t\t// 마커 객체를 담을 배열\r\n");
      out.write("\t\tvar markers_kakao = [];\t\t// 마커 객체를 담을 배열\r\n");
      out.write("\t\tvar opendInfowindow = null;\t// 열린 인포윈도우를 담을 변수\r\n");
      out.write("\t\t");

		// DB에서 마커 정보 가져오기
		ArrayList<GISDTO> markerArr = dao.getMarkerInfo();
		for (int i = 0; i < markerArr.size(); i++) {
			String group = markerArr.get(i).getuGroup();
			
			// 마커 생성 - 직장(red)
			if (group.equals("company")) {
			
      out.write("\r\n");
      out.write("\t\t\t\t// 마커의 좌표\r\n");
      out.write("\t\t\t\tvar position = new kakao.maps.LatLng(");
      out.print( markerArr.get(i).getxCoord() );
      out.write(',');
      out.write(' ');
      out.print( markerArr.get(i).getyCoord() );
      out.write(");\r\n");
      out.write("\t\t\t\t// 마커 이미지의 이미지 주소\r\n");
      out.write("\t\t\t\tvar imageSrc = \"Image/pin_spot_red.png\"; \r\n");
      out.write("\t\t\t    // 마커 이미지 크기\r\n");
      out.write("\t\t\t    var imageSize = new kakao.maps.Size(25, 36); \r\n");
      out.write("\t\t\t    // 마커 이미지 생성 \r\n");
      out.write("\t\t\t    var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    // 마커 생성\r\n");
      out.write("\t\t\t   \tvar marker = new kakao.maps.Marker({\r\n");
      out.write("\t\t\t        map: map, // 마커를 표시할 지도\r\n");
      out.write("\t\t\t        position: position, // 마커를 표시할 위치\r\n");
      out.write("\t\t\t        image: markerImage // 마커 이미지 \r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t    // 생성된 체크박스용 마커 배열에 추가\r\n");
      out.write("\t\t\t    markers_red.push(marker);\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t\t// 마커 지도에 표시\r\n");
      out.write("\t\t\t    marker.setMap(map);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t    \t// 마커 위에 표시할 인포윈도우 생성\r\n");
      out.write("\t\t    \tvar content = '<form name=\"infowindow\" action=\"detail.do\" method=\"post\">';\r\n");
      out.write("\t\t    \tcontent = content + '<div style=\"padding:5px; width:190px; height:115px;\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"xCoord\" value=\"");
      out.print( markerArr.get(i).getxCoord() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"yCoord\" value=\"");
      out.print( markerArr.get(i).getyCoord() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"address\" value=\"");
      out.print( markerArr.get(i).getAddress() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"uName\" value=\"");
      out.print( markerArr.get(i).getuName() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"uGroup\" value=\"");
      out.print( markerArr.get(i).getuGroup() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '주소:");
      out.print( markerArr.get(i).getAddress() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '이름:");
      out.print( markerArr.get(i).getuName() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '그룹:");
      out.print( markerArr.get(i).getuGroup() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"submit\" value=\"상세보기\">';\r\n");
      out.write("\t\t    \tcontent = content + '</div>';\r\n");
      out.write("\t\t    \tcontent = content + '<form>';\r\n");
      out.write("\t\t\t    var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t\t\t    \tposition: position,\r\n");
      out.write("\t\t\t        content: content\r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t    \t\r\n");
      out.write("\t\t\t    // 마커에 클릭 이벤트 등록 (우클릭: rightclick)\r\n");
      out.write("\t\t\t\tkakao.maps.event.addListener(marker, 'click', makeClickListener(map, marker, infowindow));\r\n");
      out.write("\t\t\t");

			// 마커 생성 - 친구(yellow)
			} else if (group.equals("friend")) {
			
      out.write("\r\n");
      out.write("\t\t\t\t// 마커의 좌표\r\n");
      out.write("\t\t\t\tvar position = new kakao.maps.LatLng(");
      out.print( markerArr.get(i).getxCoord() );
      out.write(',');
      out.write(' ');
      out.print( markerArr.get(i).getyCoord() );
      out.write(");\r\n");
      out.write("\t\t\t\t// 마커 이미지의 이미지 주소\r\n");
      out.write("\t\t\t\tvar imageSrc = \"Image/pin_spot_yellow.png\"; \r\n");
      out.write("\t\t\t    // 마커 이미지 크기\r\n");
      out.write("\t\t\t    var imageSize = new kakao.maps.Size(25, 36); \r\n");
      out.write("\t\t\t    // 마커 이미지 생성 \r\n");
      out.write("\t\t\t    var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    // 마커 생성\r\n");
      out.write("\t\t\t   \tvar marker = new kakao.maps.Marker({\r\n");
      out.write("\t\t\t        map: map, // 마커를 표시할 지도\r\n");
      out.write("\t\t\t        position: position, // 마커를 표시할 위치\r\n");
      out.write("\t\t\t        image: markerImage // 마커 이미지 \r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t    // 생성된 체크박스용 마커 배열에 추가\r\n");
      out.write("\t\t\t    markers_yellow.push(marker);\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t\t// 마커 지도에 표시\r\n");
      out.write("\t\t\t    marker.setMap(map);\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t \t// 마커 위에 표시할 인포윈도우 생성\r\n");
      out.write("\t\t    \tvar content = '<form name=\"infowindow\" action=\"detail.do\" method=\"post\">';\r\n");
      out.write("\t\t    \tcontent = content + '<div style=\"padding:5px; width:190px; height:115px;\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"xCoord\" value=\"");
      out.print( markerArr.get(i).getxCoord() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"yCoord\" value=\"");
      out.print( markerArr.get(i).getyCoord() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"address\" value=\"");
      out.print( markerArr.get(i).getAddress() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"uName\" value=\"");
      out.print( markerArr.get(i).getuName() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"uGroup\" value=\"");
      out.print( markerArr.get(i).getuGroup() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '주소:");
      out.print( markerArr.get(i).getAddress() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '이름:");
      out.print( markerArr.get(i).getuName() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '그룹:");
      out.print( markerArr.get(i).getuGroup() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"submit\" value=\"상세보기\">';\r\n");
      out.write("\t\t    \tcontent = content + '</div>';\r\n");
      out.write("\t\t    \tcontent = content + '<form>';\r\n");
      out.write("\t\t\t    var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t\t\t    \tposition: position,\r\n");
      out.write("\t\t\t        content: content\r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t    \t\r\n");
      out.write("\t\t\t    // 마커에 클릭 이벤트 등록 (우클릭: rightclick)\r\n");
      out.write("\t\t\t\tkakao.maps.event.addListener(marker, 'click', makeClickListener(map, marker, infowindow));\r\n");
      out.write("\t\t\t");

			// 마커 생성 - 가족(blue)
			} else if (group.equals("family")) {
			
      out.write("\r\n");
      out.write("\t\t\t\t// 마커의 좌표\r\n");
      out.write("\t\t\t\tvar position = new kakao.maps.LatLng(");
      out.print( markerArr.get(i).getxCoord() );
      out.write(',');
      out.write(' ');
      out.print( markerArr.get(i).getyCoord() );
      out.write(");\r\n");
      out.write("\t\t\t\t// 마커 이미지의 이미지 주소\r\n");
      out.write("\t\t\t\tvar imageSrc = \"Image/pin_spot_blue.png\"; \r\n");
      out.write("\t\t\t    // 마커 이미지 크기\r\n");
      out.write("\t\t\t    var imageSize = new kakao.maps.Size(25, 36); \r\n");
      out.write("\t\t\t    // 마커 이미지 생성 \r\n");
      out.write("\t\t\t    var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    // 마커 생성\r\n");
      out.write("\t\t\t   \tvar marker = new kakao.maps.Marker({\r\n");
      out.write("\t\t\t        map: map, // 마커를 표시할 지도\r\n");
      out.write("\t\t\t        position: position, // 마커를 표시할 위치\r\n");
      out.write("\t\t\t        image: markerImage // 마커 이미지 \r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t    // 생성된 체크박스용 마커 배열에 추가\r\n");
      out.write("\t\t\t    markers_blue.push(marker);\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t\t// 마커 지도에 표시\r\n");
      out.write("\t\t\t    marker.setMap(map);\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t\t// 마커 위에 표시할 인포윈도우 생성\r\n");
      out.write("\t\t    \tvar content = '<form name=\"infowindow\" action=\"detail.do\" method=\"post\">';\r\n");
      out.write("\t\t    \tcontent = content + '<div style=\"padding:5px; width:190px; height:115px;\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"xCoord\" value=\"");
      out.print( markerArr.get(i).getxCoord() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"yCoord\" value=\"");
      out.print( markerArr.get(i).getyCoord() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"address\" value=\"");
      out.print( markerArr.get(i).getAddress() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"uName\" value=\"");
      out.print( markerArr.get(i).getuName() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"uGroup\" value=\"");
      out.print( markerArr.get(i).getuGroup() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '주소:");
      out.print( markerArr.get(i).getAddress() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '이름:");
      out.print( markerArr.get(i).getuName() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '그룹:");
      out.print( markerArr.get(i).getuGroup() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"submit\" value=\"상세보기\">';\r\n");
      out.write("\t\t    \tcontent = content + '</div>';\r\n");
      out.write("\t\t    \tcontent = content + '<form>';\r\n");
      out.write("\t\t\t    var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t\t\t    \tposition: position,\r\n");
      out.write("\t\t\t        content: content\r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t    \t\r\n");
      out.write("\t\t\t    // 마커에 클릭 이벤트 등록 (우클릭: rightclick)\r\n");
      out.write("\t\t\t\tkakao.maps.event.addListener(marker, 'click', makeClickListener(map, marker, infowindow));\r\n");
      out.write("\t\t\t");

			// 마커 생성 - 기타(guitar)
			} else if (group.equals("etc")) {
			
      out.write("\r\n");
      out.write("\t\t\t\t// 마커의 좌표\r\n");
      out.write("\t\t\t\tvar position = new kakao.maps.LatLng(");
      out.print( markerArr.get(i).getxCoord() );
      out.write(',');
      out.write(' ');
      out.print( markerArr.get(i).getyCoord() );
      out.write(");\r\n");
      out.write("\t\t\t\t// 마커 이미지의 이미지 주소\r\n");
      out.write("\t\t\t\tvar imageSrc = \"Image/pin_spot_kakao.png\"; \r\n");
      out.write("\t\t\t    // 마커 이미지 크기\r\n");
      out.write("\t\t\t    var imageSize = new kakao.maps.Size(25, 36); \r\n");
      out.write("\t\t\t    // 마커 이미지 생성 \r\n");
      out.write("\t\t\t    var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    // 마커 생성\r\n");
      out.write("\t\t\t   \tvar marker = new kakao.maps.Marker({\r\n");
      out.write("\t\t\t        map: map, // 마커를 표시할 지도\r\n");
      out.write("\t\t\t        position: position, // 마커를 표시할 위치\r\n");
      out.write("\t\t\t        image: markerImage // 마커 이미지 \r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t    // 생성된 체크박스용 마커 배열에 추가\r\n");
      out.write("\t\t\t    markers_kakao.push(marker);\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t\t// 마커 지도에 표시\r\n");
      out.write("\t\t\t    marker.setMap(map);\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t \t\t// 마커 위에 표시할 인포윈도우 생성\r\n");
      out.write("\t\t    \tvar content = '<form name=\"infowindow\" action=\"detail.do\" method=\"post\">';\r\n");
      out.write("\t\t    \tcontent = content + '<div style=\"padding:5px; width:190px; height:115px;\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"xCoord\" value=\"");
      out.print( markerArr.get(i).getxCoord() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"yCoord\" value=\"");
      out.print( markerArr.get(i).getyCoord() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"address\" value=\"");
      out.print( markerArr.get(i).getAddress() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"uName\" value=\"");
      out.print( markerArr.get(i).getuName() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"hidden\" name=\"uGroup\" value=\"");
      out.print( markerArr.get(i).getuGroup() );
      out.write("\">';\r\n");
      out.write("\t\t    \tcontent = content + '주소:");
      out.print( markerArr.get(i).getAddress() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '이름:");
      out.print( markerArr.get(i).getuName() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '그룹:");
      out.print( markerArr.get(i).getuGroup() );
      out.write("<br>';\r\n");
      out.write("\t\t    \tcontent = content + '<input type=\"submit\" value=\"상세보기\">';\r\n");
      out.write("\t\t    \tcontent = content + '</div>';\r\n");
      out.write("\t\t    \tcontent = content + '<form>';\r\n");
      out.write("\t\t\t    var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t\t\t    \tposition: position,\r\n");
      out.write("\t\t\t        content: content\r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t    \t\r\n");
      out.write("\t\t\t    // 마커에 클릭 이벤트 등록 (우클릭: rightclick)\r\n");
      out.write("\t\t\t\tkakao.maps.event.addListener(marker, 'click', makeClickListener(map, marker, infowindow));\r\n");
      out.write("\t\t\t");

			}
			
      out.write("\r\n");
      out.write("\t\t");

		}
		
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 인포윈도우를 표시하는 함수\r\n");
      out.write("\t\tfunction makeClickListener(map, marker, infowindow) {\r\n");
      out.write("\t\t    return function() {\r\n");
      out.write("\t\t    \t// 선택된 마커가 있다면 마커와 인포윈도우 닫기\r\n");
      out.write("\t\t    \tif (!!marker_click && !!infowindow_click) {\r\n");
      out.write("\t\t    \t\tmarker_click.setMap(null);\r\n");
      out.write("\t\t    \t\tinfowindow_click.close();\r\n");
      out.write("\t\t    \t}\r\n");
      out.write("\t\t    \t\r\n");
      out.write("\t        \t// 열린 인포윈도우가 있고, 새로운 인포윈도우가 열린 인포윈도우가  아니면\r\n");
      out.write("\t        \tif (!!opendInfowindow || opendInfowindow === infowindow) {\r\n");
      out.write("\t        \t\t// 인도윈도우를 닫는다\r\n");
      out.write("\t\t        \topendInfowindow.close();\r\n");
      out.write("\t        \t}\r\n");
      out.write("\t        \t\r\n");
      out.write("\t        \t// 인포윈도우를 표시\r\n");
      out.write("\t\t        infowindow.open(map, marker);\r\n");
      out.write("\r\n");
      out.write("\t\t        // 열린 윈포윈도우를 현재 윈포윈도우객체로 설정합니다\r\n");
      out.write("\t\t        opendInfowindow = infowindow;\r\n");
      out.write("\t\t    };\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 마커_red 체크박스\r\n");
      out.write("\t\tfunction marker_red() {\r\n");
      out.write("\t\t\tvar red = document.getElementById(\"red\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (red.checked) {\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < markers_red.length; i++) {\r\n");
      out.write("\t\t\t\t\tmarkers_red[i].setMap(map);\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < markers_red.length; i++) {\r\n");
      out.write("\t\t\t\t\tmarkers_red[i].setMap(null);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 마커_yellow 체크박스\r\n");
      out.write("\t\tfunction marker_yellow() {\r\n");
      out.write("\t\t\tvar yellow = document.getElementById(\"yellow\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (yellow.checked) {\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < markers_yellow.length; i++) {\r\n");
      out.write("\t\t\t\t\tmarkers_yellow[i].setMap(map);\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < markers_yellow.length; i++) {\r\n");
      out.write("\t\t\t\t\tmarkers_yellow[i].setMap(null);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 마커_blue 체크박스\r\n");
      out.write("\t\tfunction marker_blue() {\r\n");
      out.write("\t\t\tvar blue = document.getElementById(\"blue\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (blue.checked) {\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < markers_blue.length; i++) {\r\n");
      out.write("\t\t\t\t\tmarkers_blue[i].setMap(map);\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < markers_blue.length; i++) {\r\n");
      out.write("\t\t\t\t\tmarkers_blue[i].setMap(null);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 마커_kakao 체크박스\r\n");
      out.write("\t\tfunction marker_kakao() {\r\n");
      out.write("\t\t\tvar kakao = document.getElementById(\"kakao\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (kakao.checked) {\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < markers_kakao.length; i++) {\r\n");
      out.write("\t\t\t\t\tmarkers_kakao[i].setMap(map);\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < markers_kakao.length; i++) {\r\n");
      out.write("\t\t\t\t\tmarkers_kakao[i].setMap(null);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/////////////////////////////////////////////////////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/* 폴리곤 */ \r\n");
      out.write("\t\t// 다각형 객체를 구성할 좌표배열\r\n");
      out.write("\t\tvar polygonPath = [];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// JSON 파일에서 좌표값 가져오기\r\n");
      out.write("\t\tvar features = data.features;\r\n");
      out.write("\t\tfor (var i = 0; i < features.length; i++) {\r\n");
      out.write("\t\t\tvar features = features[0];\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfor (var j = 0; j < features.geometry.coordinates.length; j++) {\r\n");
      out.write("\t\t\t\tvar coordinates = features.geometry.coordinates;\r\n");
      out.write("\t\t\t\tpolygonPath.push(new kakao.maps.LatLng(coordinates[j][1], coordinates[j][0]));\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 다각형을 생성하고 지도에 표시\r\n");
      out.write("\t\tvar polygon = new kakao.maps.Polygon({\r\n");
      out.write("\t\t\tmap: map,\r\n");
      out.write("\t\t    path: polygonPath,\t// 좌표 배열의 배열로 하나의 다각형을 표시할 수 있다\r\n");
      out.write("\t\t    strokeWeight: 5,\t// 선 두께\r\n");
      out.write("\t\t    strokeColor: 'black',\t// 선 색깔\r\n");
      out.write("\t\t    strokeOpacity: 1\t// 선 불투명도 (1~0)\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 폴리곤 체크박스\r\n");
      out.write("\t\tfunction polygon_check() {\r\n");
      out.write("\t\t\tvar polygon_check = document.getElementById(\"polygon\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (polygon_check.checked) {\r\n");
      out.write("\t\t\t\t// 지도에 다각형 표시\r\n");
      out.write("\t\t\t\tpolygon.setMap(map);\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\t// 지도에 다각형 미표시\r\n");
      out.write("\t\t\t\tpolygon.setMap(null);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/////////////////////////////////////////////////////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/* 클릭위치에 새로운 마커 생성 */\r\n");
      out.write("\t    // 마커 생성\r\n");
      out.write("\t    var marker_click = new kakao.maps.Marker({});\r\n");
      out.write("\t\t \t\r\n");
      out.write("\t \t// 마커 위에 표시할 인포윈도우 생성\r\n");
      out.write("\t    var infowindow_click = new kakao.maps.InfoWindow({});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도에 클릭 이벤트를 등록하고 지도를 클릭하면 마지막 파라미터로 넘어온 함수를 호출합니다\r\n");
      out.write("\t\tkakao.maps.event.addListener(map, 'click', function(mouseEvent) {        \r\n");
      out.write("\t\t    // 클릭위치 위도, 경도 정보 추출\r\n");
      out.write("\t\t    var latlng = mouseEvent.latLng; \r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    // 추출한 위치정보로 핀 위치 설정\r\n");
      out.write("\t\t    marker_click.setPosition(latlng);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t \t// 지도에 마커 표시\r\n");
      out.write("\t\t    marker_click.setMap(map);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t \t// 서울맵 api로 좌표->주소 (JSON)\r\n");
      out.write("\t\t\tvar xhr= new XMLHttpRequest();\r\n");
      out.write("\t\t\tvar target= \"https://map.seoul.go.kr/smgis/apps/geocoding.do?cmd=getReverseGeocoding&key=63f2ba02cc0740a3b6c16a5708f94cf6&address_type=S&coord_x=\" + latlng.getLng() +  \"&coord_y=\" + latlng.getLat() + \"&req_lang=KOR&res_lang=KOR\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\txhr.open(\"GET\", target);\r\n");
      out.write("\t\t\txhr.send();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\txhr.onreadystatechange = function(){\r\n");
      out.write("\t\t\t\tif(xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("\t\t\t\t\tvar data = xhr.responseText;\r\n");
      out.write("\t\t\t\t\tdata = JSON.parse(data);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tvar form = '';\r\n");
      out.write("\t\t\t\t\tif (data.body[0] != undefined) {\r\n");
      out.write("\t\t\t\t\t\tvar address = data.body[0].value;\r\n");
      out.write("\t\t\t\t\t    form = '<form name=\"infowindow\" action=\"infowindow.do\" method=\"post\">';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<div style=\"padding:5px; width:190px; height:90px;\">';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<input type=\"hidden\" name=\"xCoord\" value=\"' + latlng.getLat() + '\">';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<input type=\"hidden\" name=\"yCoord\" value=\"' + latlng.getLng() + '\">';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<input type=\"hidden\" name=\"address\" value=\"' + address + '\">';\r\n");
      out.write("\t\t\t\t\t\tform = form + '주소:' + address + '<br>';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<input type=\"text\" name=\"uName\"><br>';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<select name=\"uGroup\" style=\"width:120px; height:25px;\">';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<option value=\"company\">직장</option>';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<option value=\"friend\">친구</option>';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<option value=\"family\">가족</option>';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<option value=\"etc\">기타</option>';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<input type=\"submit\" value=\"저장\">';\r\n");
      out.write("\t\t\t\t\t\tform = form + '</div>';\r\n");
      out.write("\t\t\t\t\t\tform = form + '<form>';\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tform = '주소를 표시할 수 없습니다.';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t    // 인포윈도우에 표시할 내용\r\n");
      out.write("\t\t\t\t \tinfowindow_click.setContent(form);\r\n");
      out.write("\t\t\t\t \t\r\n");
      out.write("\t\t\t\t\t// 열린 인포윈도우가 있으면\r\n");
      out.write("\t\t\t    \tif (!!opendInfowindow) {\r\n");
      out.write("\t\t\t    \t\t// 인포윈도우를 닫는다\r\n");
      out.write("\t\t\t        \topendInfowindow.close();\r\n");
      out.write("\t\t\t    \t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// 지도에 인포윈도우 표시\r\n");
      out.write("\t\t\t\t\tinfowindow_click.open(map, marker_click);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t    \t// 열린 윈포윈도우를 현재 윈포윈도우 객체로 설정\r\n");
      out.write("\t\t\t        opendInfowindow = infowindow_click;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/////////////////////////////////////////////////////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 일반 지도와 스카이뷰로 지도 타입을 전환할 수 있는 지도타입 컨트롤을 생성합니다\r\n");
      out.write("\t\tvar mapTypeControl = new kakao.maps.MapTypeControl();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도에 컨트롤을 추가해야 지도위에 표시됩니다\r\n");
      out.write("\t\t// kakao.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미합니다\r\n");
      out.write("\t\tmap.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도 확대 축소를 제어할 수 있는  줌 컨트롤을 생성합니다\r\n");
      out.write("\t\tvar zoomControl = new kakao.maps.ZoomControl();\r\n");
      out.write("\t\tmap.addControl(zoomControl, kakao.maps.ControlPosition.LEFT);\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<form name=\"search\" action=\"index.do\" method=\"post\">\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"searchText\"><input type=\"submit\" value=\"이름검색\">\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<table>\r\n");
      out.write("\t<thead>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t<td width=200>그룹</td>\r\n");
      out.write("\t\t<td width=200>이름</td>\r\n");
      out.write("\t\t<td>주소</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</thead>\r\n");
      out.write("\t<tfoot>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t<td colspan=\"3\">\r\n");
      out.write("\t\t");

		// 리스트 DB로부터 받아오기
		ArrayList<GISDTO> arr = dao.list(cPage, listSize);
		
		// 검색된 리스트 DB로부터 받아오기
		if (searchText != null) {
			arr = dao.listSearch(cPage, listSize, searchText);
		}
		
      out.write("\r\n");
      out.write("\t\t");

		if (arr != null && arr.size() != 0) {
			// <<
			if (userGroup != 0) {
				if (searchText.equals("")) {
			
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"index.do?cPage=");
      out.print( (userGroup - 1) * pageBlockSize + pageBlockSize );
      out.write("&searchText=");
      out.print( searchText );
      out.write("\">&lt;</a>\r\n");
      out.write("\t\t\t");

				} else {
			
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"index.do?cPage=");
      out.print( (userGroup - 1) * pageBlockSize + pageBlockSize );
      out.write("\">&lt;</a>\r\n");
      out.write("\t\t\t");

				}
			}
			
      out.write("\t\r\n");
      out.write("\t\t\t");

			// 4-2. 그룹화 후 블록 보이기
			for (int i = (userGroup * pageBlockSize + 1); i <= (userGroup * pageBlockSize + pageBlockSize); i++) {
				if (searchText != null) {
					if (cPage == i) {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t\t&nbsp;[<a href=\"index.do?cPage=");
      out.print( i );
      out.write("&searchText=");
      out.print( searchText );
      out.write('"');
      out.write('>');
      out.print( i );
      out.write("</a>]&nbsp;\r\n");
      out.write("\t\t\t\t\t");

					} else {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t\t&nbsp;<a href=\"index.do?cPage=");
      out.print( i );
      out.write("&searchText=");
      out.print( searchText );
      out.write('"');
      out.write('>');
      out.print( i );
      out.write("</a>&nbsp;\r\n");
      out.write("\t\t\t\t\t");

					}
					
      out.write("\r\n");
      out.write("\t\t\t");

				} else {
					if (cPage == i) {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t\t&nbsp;[<a href=\"index.do?cPage=");
      out.print( i );
      out.write('"');
      out.write('>');
      out.print( i );
      out.write("</a>]&nbsp;\r\n");
      out.write("\t\t\t\t\t");

					} else {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t\t&nbsp;<a href=\"index.do?cPage=");
      out.print( i );
      out.write('"');
      out.write('>');
      out.print( i );
      out.write("</a>&nbsp;\r\n");
      out.write("\t\t\t\t\t");

					}
			
      out.write("\r\n");
      out.write("\t\t\t");

				}
				if (i == totalPage) break;
			}
			
      out.write("\r\n");
      out.write("\t\t\t");

			// >>
			if (userGroup != (totalPage / pageBlockSize) - (totalPage % pageBlockSize == 0 ? 1 : 0)) {
				if (searchText.equals("")) {
			
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"index.do?cPage=");
      out.print( (userGroup + 1 ) * pageBlockSize + 1 );
      out.write("&searchText=");
      out.print( searchText );
      out.write("\">&gt;</a>\r\n");
      out.write("\t\t\t");

				} else {
			
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"index.do?cPage=");
      out.print( (userGroup + 1 ) * pageBlockSize + 1 );
      out.write("\">&gt;</a>\r\n");
      out.write("\t\t\t");

				}
			}
		}
		
      out.write("\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</tfoot>\r\n");
      out.write("\t<tbody>\r\n");
      out.write("\t\t");

		if (arr == null || arr.size() == 0) {
		
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t<td colspan=\"3\" align=\"center\">\r\n");
      out.write("\t\t\t저장된 마커 정보가 없습니다</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t");

		} else {
			for (int i = 0; i < arr.size(); i++) {
		
      out.write("\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( arr.get(i).getuGroup() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( arr.get(i).getuName() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td><a href=\"detail.do?xCoord=");
      out.print( markerArr.get(i).getxCoord() );
      out.write("&yCoord=");
      out.print( markerArr.get(i).getyCoord() );
      out.write("&address=");
      out.print( markerArr.get(i).getAddress() );
      out.write("&uName=");
      out.print( markerArr.get(i).getuName() );
      out.write("&uGroup=");
      out.print( markerArr.get(i).getuGroup() );
      out.write('"');
      out.write('>');
      out.print( arr.get(i).getAddress() );
      out.write("</a></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t");

			}
		}
		
      out.write("\r\n");
      out.write("\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("</article>\r\n");
      out.write("</section>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
